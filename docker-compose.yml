# version: '3.9' # Опционально, можно удалить

services:
  db:
    image: postgres:14 # Укажите конкретную версию PostgreSQL
    container_name: postgres_db_med # Задаем имя контейнера
    volumes:
      # Используем именованный том для сохранения данных БД
      - postgres_data:/var/lib/postgresql/data/
    environment:
      # Загружаем настройки БД из файла .env
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      # Пробрасываем порт БД для возможного внешнего доступа
      - "5432:5432"
    healthcheck: # Проверка готовности БД перед запуском backend
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_backend_med
    # Команда для запуска Django development сервера
    command: python manage.py runserver 0.0.0.0:8000
    # Монтируем локальный код для удобства разработки бэкенда
    volumes:
      - ./backend:/app
    ports:
      # Пробрасываем порт Django
      - "8000:8000"
    environment:
      # Передаем переменные окружения для настроек Django и БД
      POSTGRES_NAME: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_HOST: db # Имя сервиса БД в Docker сети
      DATABASE_PORT: ${DATABASE_PORT}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      PYTHONUNBUFFERED: 1 # Для корректного вывода логов Python в Docker
    depends_on: # Запускать только после того, как сервис db станет healthy
      db:
        condition: service_healthy

  frontend: # Конфигурация для раздачи продакшен-сборки через Nginx
    build:
      context: ./frontend
      dockerfile: Dockerfile # Используется Dockerfile с multi-stage build и Nginx
    container_name: react_frontend_med
    # command: не нужен, т.к. CMD указан в Dockerfile (запуск Nginx)
    # volumes: не нужны, т.к. код уже скопирован в образ при сборке
    ports:
      # Пробрасываем порт 80 Nginx из контейнера на порт 3000 хоста
      - "3000:80"
    # development-специфичные environment, stdin_open, tty не нужны
    restart: unless-stopped # Автоматический перезапуск контейнера

# Определяем именованный том для данных PostgreSQL
volumes:
  postgres_data:
    driver: local # Используем стандартный драйвер
