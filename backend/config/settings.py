# backend/config/settings.py
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os                 # <--- ДОБАВИТЬ ИМПОРТ OS
from datetime import timedelta # Перенесем импорт timedelta наверх

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# --- ЧИТАЕМ SECRET_KEY ИЗ ПЕРЕМЕННЫХ ОКРУЖЕНИЯ ---
# Генерируем случайный ключ, если переменная не задана (НЕ ДЛЯ ПРОДА!)
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-fallback-key-replace-me')
# -----------------------------------------------

# SECURITY WARNING: don't run with debug turned on in production!
# --- ЧИТАЕМ DEBUG ИЗ ПЕРЕМЕННЫХ ОКРУЖЕНИЯ ---
# Значение по умолчанию False для безопасности, но для разработки можно True
DEBUG = os.environ.get('DEBUG', 'True') == 'True' # Сравниваем со строкой 'True'
# -----------------------------------------------

# --- НАСТРОЙКА ALLOWED_HOSTS ---
# В режиме DEBUG можно разрешить все, но лучше настроить явно
# В продакшене здесь должен быть ваш домен!
ALLOWED_HOSTS = []
if DEBUG:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', os.environ.get('DATABASE_HOST', 'db')] # Добавим хост БД для healthcheck, если нужно
# Для продакшена:
# ALLOWED_HOSTS = ['yourdomain.com', 'www.yourdomain.com']
# -------------------------------


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'corsheaders',              # <--- CORS должен быть здесь
    'rest_framework_simplejwt',
    # 'rest_framework_simplejwt.token_blacklist',

    # Your apps
    'core', # Убедитесь, что имя приложения правильное
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # --- CORS MIDDLEWARE ДОЛЖЕН БЫТЬ ВЫШЕ CommonMiddleware ---
    'corsheaders.middleware.CorsMiddleware',
    # ---------------------------------------------------------
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# --- ИСПРАВЛЕННАЯ НАСТРОЙКА БАЗЫ ДАННЫХ ---
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',   # Используем PostgreSQL
        'NAME': os.environ.get('POSTGRES_NAME'),     # Имя БД из переменной окружения
        'USER': os.environ.get('POSTGRES_USER'),     # Пользователь из переменной окружения
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),# Пароль из переменной окружения
        'HOST': os.environ.get('DATABASE_HOST'),     # Хост БД (имя сервиса 'db' в Docker)
        'PORT': os.environ.get('DATABASE_PORT'),     # Порт БД
    }
}
# -----------------------------------------


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru' # <--- ИЗМЕНЕНО НА РУССКИЙ
TIME_ZONE = 'Europe/Moscow' # <--- ИЗМЕНЕНО НА МОСКОВСКОЕ ВРЕМЯ (или ваш часовой пояс)
USE_I18N = True
USE_TZ = True # Важно оставить True для корректной работы с часовыми поясами


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
# STATIC_ROOT = BASE_DIR / 'staticfiles' # <--- Раскомментируйте для сбора статики в продакшене

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Django REST Framework Settings ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication', # Оставьте, если нужна аутентификация по сессии (для админки/DRF API)
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Требуем аутентификацию по умолчанию
    ),
    # Опционально: Настройки пагинации, фильтрации и т.д.
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10
}
# -----------------------------------


# --- Simple JWT Settings ---
# Настройки перенесены сюда для лучшей читаемости
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),    # Короткое время жизни Access токена
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),     # Длинное время жизни Refresh токена
    'ROTATE_REFRESH_TOKENS': False,                  # Не обновлять Refresh токен при каждом запросе
    'BLACKLIST_AFTER_ROTATION': False,                 # Не добавлять в черный список (требует доп. настроек)

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,                      # Используем SECRET_KEY Django
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),               # Ожидаем "Authorization: Bearer <token>"
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),  # Не используется, если ROTATE_REFRESH_TOKENS = False
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # Не используется, если ROTATE_REFRESH_TOKENS = False
}
# --- /Simple JWT Settings ---


# --- CORS Settings ---
# Разрешаем запросы от нашего фронтенда
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Адрес React dev сервера или Nginx
    "http://127.0.0.1:3000",
]
# Если фронтенд будет на другом домене в продакшене, добавьте его сюда
# CORS_ALLOW_CREDENTIALS = True # Раскомментируйте, если используете cookies/сессии с CORS
# CORS_ALLOW_ALL_ORIGINS = False # В продакшене должно быть False
# --------------------
